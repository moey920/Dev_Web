1. 연산자
    (1) 산술 연산자
        1) 숫자 뿐 아니라 문자열도 산술 연산자 사용이 가능
            console.log(20 + 10);
            console.log(20 - 10);  
            console.log(20 * 10); 
            console.log(20 / 10);  
            console.log(20 % 10);  
            console.log("20" + "10");  // 2010
            console.log("20" - "10");  // 10
            console.log("20" * "10"); 
            console.log("20" / "10"); 
            console.log("20" % "10"); 
            console.log("Inkwon " + "Kim");  // Inkwon Kim

    (2) 증감 연산자
        1) ++ : 1증가 / -- : 1감소 / 변수의 앞,뒤에 있으냐에 따라 차이가 있다. 
            출력시점을 기준으로 변수 앞에 증감 연산자가 있으면, 증감 후에 변수를 출력한다.
            출력시점을 기준으로 변수 뒤에 증감 연산자가 있으면, 변수를 출력하고 변수를 증감시킨다.
            var num = 10;
            console.log(++num); // 변환된 num
            console.log(--num);
            console.log(num++); // num을 출력 후 num에 +1
            console.log(num--);

    (3) 비교 연산자
        1) 기존의 비교 연산자와 다른 점 : ===(값, 데이터 타입까지 비교)
            console.log(10 == 10); // 같느냐
            console.log(10 === "10"); // 데이터 타입까지 같느냐
            console.log(10 !== 20);
            console.log(10 > 20);
            console.log(10 >= 20);
            console.log(10 < 20);
            console.log(10 <= 20);

    (4) 논리 연산자
        1) && : AND 연산자로 앞 뒤 조건 모두 참인 경우에만 true 반환
            || : OR 연산자로 둘 중 하나만 참이여도 true 반환
            console.log(10 === 10 && 20 === 30);
            console.log(10 === 10 || 20 === 30);
------------------------------------------------------------------------------------------------------------------------------------
2. 조건문

    (1) if 문
        1) 조건문에는 비교 연산자, 논리 연산자, Boolean 중의 하나이다. (T of F), 따라서 조건에 직접 True를 입력해도 가능하다.
            var a = 20;
            var b = 40;
            if ( a < b ) {
                console.log("a는 b보다 작다.");
            }

    (2) if-else 문
        var a = 20;
        var b = 40;
        if ( a > b ) {
            console.log("a는 b보다 크다.");
        } 
        else { //if 조건이 거짓일 경우 실행
            console.log("a는 b보다 작다.");
        }

    (3) else if 문
        1) else if 문은 가장 첫 번째로 true가 나오는 조건의 명령을 수행한다.
            var a = 20;
            var b = 40;
            var c = 60;
            if ( a > b ) { 
                console.log("a는 b보다 크다.");
            } 
            else if ( b > c ) { 
                console.log("b는 c보다 크다.");
            } 
            else if ( a < c ) { 
                console.log("a는 c보다 작다.");
            } 
            else if ( b < c ) { 
                console.log("b는 c보다 작다.");
            } 
            else { 
                console.log(“모든 조건을 만족하지 않는다.”);
            }

    (4) 중첩 if 문
        1) if 내에 또 다른 if 문을 삽입할 때 사용
            var a = 20;
            var b = 40;
            if ( a !== b ) {
                if (a > b) { 
                    console.log(“a는 b보다 크다”); 
                }
                else { 
                    console.log("a는 b보다 작다”); 
                }
            } 
            else { 
                console.log("a와 b는 같다”); 
            }

------------------------------------------------------------------------------------------------------------------------------------
3. 반복문

    (1) while 문   
        1) 유지보수의 효율을 증가시키기 위해 반복되는 구문을 짧게 만들 때 사용한다. (구구단과 같이)
        2) 고정 값과 가변 값을 잘 파악해야한다.
            var num = 0;
            while (num < 10) {
                console.log(num);
                num++
            }
        3) while문은 조건이 true인 경우 명령을 수행한다. 제한 없이 true인 값이 조건으로 주어지면 무한 루프에 빠진다.
            //무한 루프 예시
            while (1 === 1) {
                console.log("Elice")
            }

    (2) do~while 문
        1) do는 while의 조건과 상관없이 무조건 한 번은 실행된다. 조건은 do문을 실행 한 후 따진다.
            var i = 12;
            do {
                console.log(i);
                i++;
            } 
            while (i < 10); // while문은 거짓이기 때문에 작동하지 않지만, do는 실행되기 때문에 i는 13이 된다.
            
    (3) for 문
        1) for문은 while문보다 직관적으로 작성되는 반복문이다. 반복 횟수가 정해져있을 때 사용한다.
            for(변수 초기화, 반복횟수 지정, 증감범위 지정) {}
            for (var i = 0; i < 10; i++) {
                console.log(i);
            }
        2) 구구단을 예로 들었을 때, 가변 값은 for문으로 작성하고, 고정 값은 for문 안에 변수로 설정한다. 
            for/while 문 중 어느 것을 사용할 것인지, 가변 값은 무엇으로 설정할 것인지 정해야한다.
            for(var i=0; i<10; i++) {
                var num = 2;
                console.log(num*i);
            }
------------------------------------------------------------------------------------------------------------------------------------
4. 자바스크립트 활용

    (1) 주사위 게임 만들기
        1) Math 객체의 메서드를 사용해서 random(0~1 사이 값 생성) *6을 하면 0.00001~5.99999 값이 나온다.
            var dice = Math.random(); // 0~1, 0과 1은 나오지 않는다.  
            var dice = Math.random()*6; // 0.0000001~5.999999, 0과 1은 나오지 않는다.  
        2) Math 객체의 floor 메서드를 사용해서 0.00001~5.99999 값을 0~5로 만든다.
            var dice = Math.floor(Math.random()*6); // 0~5
        3) +1을 통해 1~6 사이의 값이 나오게 한다.
            var dice = Math.floor( Math.random() * 6 ) + 1;

    (2) 소수 출력하기 알고리즘
        1) 소수 : 1과 자기 자신만을 약수로 갖는 수
        function isPrime(n) {
            var divisor = 2; // 나누는 초기값을 2로 설정. 1은 소수의 의미가 없기 때문에. 
            while(n > divisor) {
                if(n % divisor === 0) { // 반복문 안에 조건문을 결합한 형태
                    return false; // n이 divisor로 나누어 떨어지면 소수가 아니다 -> false 반환
                }
                else {
                    divisor++; // 나누어 떨어지지 않는다면 다음 수를 확인한다.
                }
            }
            return true; // 2~6까지 대입 후 아무런 숫자로도 나우어 떨어지지 않으면 소수이다. 따라서 true를 반환한다.
        }

        console.log(isPrime(6)); // 2, 3, 4, 5 / 2부터 시작한다, 반복문을 사용하는 것이 효율적이다.
        console.log(isPrime(7)); // 2, 3, 4, 5, 6

    (3) 문자열 거꾸로 출력하기
        
